
Verilator is a nice verilog simulator.  Super easy to interface the logic with C/C++.

Getting and installing verilator is described on their website:
http://www.veripool.org/wiki/verilator/Installing


Basically:

git clone http://git.veripool.org/git/verilator   # Only first time
cd verilator
git pull        # Make sure we're up-to-date
git tag         # See what versions exist
autoconf        # Create ./configure script
unsetenv VERILATOR_ROOT  # For csh; ignore error if on bash
unset VERILATOR_ROOT  # For bash
./configure
make  # this can take a while
make install



In the verilator directory a Makefile, a copy of the lsa rtl (lsa.cdl)
vmain.cpp which is the C++ code that integrates the rtl simulation
with memory and peripherals implemented in C++.  vmain.cpp wants a
file named sram.h generated by lsa-as, copy the sram.h file into
the verilator directory and run make test.vcd.  This will build
everything and run the simulation.  The simulation only runs a fixed
number of clock cycles defined by this line near the end of vmain.cpp:
        if(tick>2000) break;
Change that line to increase or decrease the number of clock cycles.




